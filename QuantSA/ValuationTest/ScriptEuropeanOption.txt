using QuantSA.Valuation;
using QuantSA.General;
using QuantSA.General.Dates;
using System;
using System.Collections.Generic;

public class EuropeanOptionScript : Product
{
    private Date exerciseDate;
    private double fwdPrice;
    private Share share;
    private double strike;
    private Date valueDate;

    public EuropeanOptionScript()
    {
        share = new Share("AAA", Currency.ZAR);
        strike = 100.0;
        exerciseDate = new Date(2017, 08, 28);
    }
    
    public override Product Clone()
    {
        EuropeanOptionScript product = new EuropeanOptionScript();
        if (valueDate!=null)
            product.valueDate = new Date(valueDate);
        return product;
    }

    public override List<Cashflow> GetCFs()
    {
        double amount = Math.Max(0, fwdPrice - strike);
        return new List<Cashflow>() {new Cashflow(exerciseDate, amount, share.currency) };
    }

    public override List<MarketObservable> GetRequiredIndices()
    {
        return new List<MarketObservable> { share };
    }

    public override List<Date> GetRequiredIndexDates(MarketObservable index)
    {
        if (valueDate <= exerciseDate)
        {
            return new List<Date> {exerciseDate };
        }
        else
        {
            return new List<Date>();
        }
    }

    public override void SetIndexValues(MarketObservable index, double[] indices)
    {
        fwdPrice = indices[0];
    }

    public override void SetValueDate(Date valueDate)
    {
        this.valueDate = valueDate;
    }

    public override void Reset()
    {
        // Nothing to reset.
    }

    public override List<Currency> GetCashflowCurrencies()
    {
        return new List<Currency> { share.currency };
    }

    public override List<Date> GetCashflowDates(Currency ccy)
    {
        return new List<Date> { exerciseDate };
    }
}
